<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:websocket="http://www.springframework.org/schema/websocket"
xmlns="http://java.sun.com/xml/ns/javaee" 
xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
  
  <!-- contextConfigLocation参数定义了要装入的 Spring 配置文件。 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring/root-context.xml</param-value>
  </context-param>
  <!-- 设定使用哪种环境  test production dev -->
  <context-param>
    <param-name>spring.profiles.active</param-name>
    <param-value>dev</param-value>
  </context-param>
  
  <context-param>
    <param-name>spring.liveBeansView.mbeanDomain</param-name>
    <param-value>default</param-value>
  </context-param>
  <!-- ContextLoaderListener监听器的作用就是启动Web容器时，自动装配ApplicationContext的配置信息 -->
<!--   <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener> -->
  <listener>
       <listener-class>
           com.goldcow.emanage.util.spring.SpringContextLoaderListener
       </listener-class>
</listener>
  <!-- 金佳的？ -->
  <listener>
    <listener-class>com.goldcow.platform.syscontext.BackSystemInitListener</listener-class>
  </listener>
  <!-- DispatcherServlet主要负责流程的控制 -->
  <servlet>
    <servlet-name>appServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring/appServlet/servlet-context.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
    <async-supported>true</async-supported>
  </servlet>
  <servlet-mapping>
    <servlet-name>appServlet</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>
  
  <!-- 后台信息初始化   持久的？-->
  <servlet>
    <servlet-name>backSystemInit</servlet-name>
    <servlet-class>com.goldcow.sframe.util.servlet.BackSystemInitServlet</servlet-class>
    <load-on-startup>2</load-on-startup>
  </servlet>
  
  <filter>
	    <filter-name>EncodeFilter</filter-name>
	    <filter-class>com.goldcow.sframe.util.filter.EncodeFilter</filter-class>
	      <init-param>
	            <param-name>encoding</param-name>
	            <param-value>UTF-8</param-value>
	       </init-param>
	  </filter>
	  <filter-mapping>
	    <filter-name>EncodeFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	  </filter-mapping>
 <!-- 配置请求过滤器，编码格式设为UTF-8，避免中文乱码-->
  <filter>
	    <filter-name>Set Character Encoding</filter-name>
	    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	    <init-param>
	      <param-name>encoding</param-name>
	      <param-value>UTF-8</param-value>
	    </init-param>
	    <init-param>
	      <param-name>forceEncoding</param-name>
	      <param-value>true</param-value>
	    </init-param>
	  </filter>
	  <filter-mapping>
	    <filter-name>Set Character Encoding</filter-name>
	    <url-pattern>/*</url-pattern>
	  </filter-mapping>
  <filter>
    <filter-name>HTMLCharacterFilter</filter-name>
    <filter-class>com.goldcow.sframe.util.filter.HTMLCharacterFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>HTMLCharacterFilter</filter-name>
    <url-pattern>*.do</url-pattern>
  </filter-mapping>
  <!-- 登录过滤器  按照资源 登录后session 判断-->
  <filter>
    <filter-name>LoginFilter</filter-name>
    <filter-class>com.goldcow.sframe.util.filter.LoginFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>LoginFilter</filter-name>
    <url-pattern>*</url-pattern>
  </filter-mapping>
  <!-- 日志记录 -->
  <filter>
    <filter-name>LoggerFilter</filter-name>
    <filter-class>com.goldcow.sframe.util.filter.LoggerFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>LoggerFilter</filter-name>
    <url-pattern>*.do</url-pattern>
  </filter-mapping>
  
  <!-- spring3.0添加了一个过滤器，可以将这些请求转 换为标准的http方法，使得支持GET、POST、PUT与DELETE请求 -->
  <filter>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <!-- DispatcherServlet的name -->
    <servlet-name>appServlet</servlet-name>
  </filter-mapping>
  
  
  <!-- 单位是分 -->
  <session-config>
    <session-timeout>30</session-timeout>
  </session-config>
  <welcome-file-list>
    <welcome-file>login.html</welcome-file>
  </welcome-file-list>
  
  <!-- 指定特定后缀名的mime类型,好让该后缀名的文件被安全传输到客户端. -->
  <mime-mapping>
    <extension>xlsx</extension>
    <mime-type>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>docx</extension>
    <mime-type>application/vnd.openxmlformats-officedocument.wordprocessingml.document</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>csv</extension>
    <mime-type>application/vnd.ms-excel</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>rar</extension>
    <mime-type>application/rar</mime-type>
  </mime-mapping>
</web-app>